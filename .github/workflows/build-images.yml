name: Build and Push Container Images

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'applications/**'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'applications/**'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated, or "all")'
        required: false
        default: 'all'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/clinical-mlops

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: detect
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.services }}" == "all" ]; then
              SERVICES="clinical-data-gateway,lab-results-processor,feature-engineering,model-training,model-serving"
            else
              SERVICES="${{ github.event.inputs.services }}"
            fi
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "applications/")
            SERVICES=""

            if echo "$CHANGED_FILES" | grep -q "applications/clinical-data-gateway/"; then
              SERVICES="${SERVICES},clinical-data-gateway"
            fi
            if echo "$CHANGED_FILES" | grep -q "applications/lab-results-processor/"; then
              SERVICES="${SERVICES},lab-results-processor"
            fi
            if echo "$CHANGED_FILES" | grep -q "applications/feature-engineering/"; then
              SERVICES="${SERVICES},feature-engineering"
            fi
            if echo "$CHANGED_FILES" | grep -q "applications/model-training/"; then
              SERVICES="${SERVICES},model-training"
            fi
            if echo "$CHANGED_FILES" | grep -q "applications/model-serving/"; then
              SERVICES="${SERVICES},model-serving"
            fi

            SERVICES=$(echo "$SERVICES" | sed 's/^,//')

            if [ -z "$SERVICES" ]; then
              SERVICES="all"
            fi
          fi

          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "Detected services: $SERVICES"

  build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services != ''
    strategy:
      matrix:
        service:
          - clinical-data-gateway
          - lab-results-processor
          - feature-engineering
          - model-training
          - model-serving
      fail-fast: false

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if service should be built
        id: should-build
        run: |
          SERVICES="${{ needs.detect-changes.outputs.services }}"
          SERVICE="${{ matrix.service }}"

          if [ "$SERVICES" == "all" ] || echo "$SERVICES" | grep -q "$SERVICE"; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "Building $SERVICE"
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "Skipping $SERVICE"
          fi

      - name: Set up Docker Buildx
        if: steps.should-build.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.should-build.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.should-build.outputs.build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.should-build.outputs.build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./applications/${{ matrix.service }}
          file: ./applications/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Run Trivy vulnerability scanner
        if: steps.should-build.outputs.build == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: steps.should-build.outputs.build == 'true' && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        if: steps.should-build.outputs.build == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.service }}.json

      - name: Upload SBOM artifact
        if: steps.should-build.outputs.build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.json
          retention-days: 30

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build completed for changed services" >> $GITHUB_STEP_SUMMARY
          echo "Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
