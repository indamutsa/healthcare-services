# Kubernetes Secrets for Clinical MLOps Platform
#
# IMPORTANT: This file contains base64-encoded secrets for demonstration purposes.
# In production, use one of the following approaches:
# 1. Sealed Secrets (https://github.com/bitnami-labs/sealed-secrets)
# 2. External Secrets Operator (https://external-secrets.io/)
# 3. HashiCorp Vault
# 4. Cloud provider secret managers (AWS Secrets Manager, Azure Key Vault, GCP Secret Manager)
#
# DO NOT commit actual secrets to version control!

---
# MinIO Credentials
apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: clinical-mlops
  labels:
    app: minio
    managed-by: gitops
type: Opaque
data:
  # Default values for development - CHANGE IN PRODUCTION
  # username: admin (base64 encoded)
  # password: changeme123! (base64 encoded)
  accessKey: YWRtaW4=
  secretKey: Y2hhbmdlbWUxMjMh

---
# PostgreSQL MLflow Credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgres-mlflow-credentials
  namespace: clinical-mlops
  labels:
    app: postgres-mlflow
    managed-by: gitops
type: Opaque
data:
  # username: mlflow_user (base64 encoded)
  # password: mlflow_secure_pass_123! (base64 encoded)
  # database: mlflow_db (base64 encoded)
  username: bWxmbG93X3VzZXI=
  password: bWxmbG93X3NlY3VyZV9wYXNzXzEyMyE=
  database: bWxmbG93X2Ri

---
# PostgreSQL Airflow Credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgres-airflow-credentials
  namespace: clinical-mlops
  labels:
    app: postgres-airflow
    managed-by: gitops
type: Opaque
data:
  # username: airflow_user (base64 encoded)
  # password: airflow_secure_pass_123! (base64 encoded)
  # database: airflow_db (base64 encoded)
  username: YWlyZmxvd191c2Vy
  password: YWlyZmxvd19zZWN1cmVfcGFzc18xMjMh
  database: YWlyZmxvd19kYg==

---
# Redis Credentials
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: clinical-mlops
  labels:
    app: redis
    managed-by: gitops
type: Opaque
data:
  # password: redis_secure_pass_123! (base64 encoded)
  password: cmVkaXNfc2VjdXJlX3Bhc3NfMTIzIQ==

---
# Kafka Credentials
apiVersion: v1
kind: Secret
metadata:
  name: kafka-credentials
  namespace: clinical-mlops
  labels:
    app: kafka
    managed-by: gitops
type: Opaque
data:
  # username: kafka_admin (base64 encoded)
  # password: kafka_secure_pass_123! (base64 encoded)
  username: a2Fma2FfYWRtaW4=
  password: a2Fma2Ffc2VjdXJlX3Bhc3NfMTIzIQ==

---
# Clinical Data Gateway Secrets
apiVersion: v1
kind: Secret
metadata:
  name: clinical-gateway-secrets
  namespace: clinical-mlops
  labels:
    app: clinical-data-gateway
    managed-by: gitops
type: Opaque
data:
  # JWT secret for API authentication
  # jwt-secret: clinical_jwt_secret_key_change_in_prod (base64 encoded)
  jwt-secret: Y2xpbmljYWxfand0X3NlY3JldF9rZXlfY2hhbmdlX2luX3Byb2Q=

  # Database connection string
  # database-url: postgresql://mlflow_user:mlflow_secure_pass_123!@postgres-mlflow:5432/mlflow_db
  database-url: cG9zdGdyZXNxbDovL21sZmxvd191c2VyOm1sZmxvd19zZWN1cmVfcGFzc18xMjMhQHBvc3RncmVzLW1sZmxvdzo1NDMyL21sZmxvd19kYg==

  # Redis connection string
  # redis-url: redis://:redis_secure_pass_123!@redis:6379/0
  redis-url: cmVkaXM6Ly86cmVkaXNfc2VjdXJlX3Bhc3NfMTIzIUByZWRpczo2Mzc5LzA=

---
# Model Serving API Keys
apiVersion: v1
kind: Secret
metadata:
  name: model-serving-secrets
  namespace: clinical-mlops
  labels:
    app: model-serving
    managed-by: gitops
type: Opaque
data:
  # API key for model serving authentication
  # api-key: model_serving_api_key_change_in_prod (base64 encoded)
  api-key: bW9kZWxfc2VydmluZ19hcGlfa2V5X2NoYW5nZV9pbl9wcm9k

---
# Grafana Admin Credentials
apiVersion: v1
kind: Secret
metadata:
  name: grafana-credentials
  namespace: clinical-mlops
  labels:
    app: grafana
    managed-by: gitops
type: Opaque
data:
  # admin-user: admin (base64 encoded)
  # admin-password: grafana_secure_pass_123! (base64 encoded)
  admin-user: YWRtaW4=
  admin-password: Z3JhZmFuYV9zZWN1cmVfcGFzc18xMjMh

---
# TLS Certificate Secret
apiVersion: v1
kind: Secret
metadata:
  name: clinical-mlops-tls
  namespace: clinical-mlops
  labels:
    managed-by: cert-manager
type: kubernetes.io/tls
data:
  # These should be generated by cert-manager or provided externally
  # tls.crt and tls.key are base64 encoded certificate and private key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
# Image Pull Secrets (for private registries)
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: clinical-mlops
type: kubernetes.io/dockerconfigjson
data:
  # Docker config JSON (base64 encoded)
  # Create with: kubectl create secret docker-registry regcred \
  #   --docker-server=<registry-server> \
  #   --docker-username=<username> \
  #   --docker-password=<password> \
  #   --docker-email=<email>
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiPHVzZXJuYW1lPiIsInBhc3N3b3JkIjoiPHBhc3N3b3JkPiIsImVtYWlsIjoiPGVtYWlsPiIsImF1dGgiOiI8YmFzZTY0LWVuY29kZWQtdXNlcm5hbWU6cGFzc3dvcmQ+In19fQ==

---
# External Secrets Operator Configuration (Optional)
# Uncomment if using External Secrets Operator
#
# apiVersion: external-secrets.io/v1beta1
# kind: SecretStore
# metadata:
#   name: aws-secrets-manager
#   namespace: clinical-mlops
# spec:
#   provider:
#     aws:
#       service: SecretsManager
#       region: us-east-1
#       auth:
#         jwt:
#           serviceAccountRef:
#             name: external-secrets-sa
#
# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: minio-credentials
#   namespace: clinical-mlops
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: aws-secrets-manager
#     kind: SecretStore
#   target:
#     name: minio-credentials
#     creationPolicy: Owner
#   data:
#   - secretKey: accessKey
#     remoteRef:
#       key: clinical-mlops/minio
#       property: accessKey
#   - secretKey: secretKey
#     remoteRef:
#       key: clinical-mlops/minio
#       property: secretKey
