# LocalStack - AWS Cloud Stack Emulation
# Provides SQS, SNS, Lambda, DynamoDB, Secrets Manager, CloudWatch, etc.
# NOTE: S3 is handled by MinIO (same API, production-ready)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: localstack
  namespace: clinical-mlops
  labels:
    app: localstack
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: localstack
  template:
    metadata:
      labels:
        app: localstack
        tier: infrastructure
    spec:
      containers:
      - name: localstack
        image: localstack/localstack:3.0
        ports:
        - containerPort: 4566
          name: gateway
        env:
        # Services (excluding S3 - MinIO handles that)
        - name: SERVICES
          value: "sqs,sns,lambda,dynamodb,secretsmanager,ssm,cloudwatch,logs,events,kinesis,stepfunctions,iam,sts,kms,ecr"

        # Configuration
        - name: DEBUG
          value: "1"
        - name: PERSISTENCE
          value: "1"
        - name: DATA_DIR
          value: "/tmp/localstack/data"
        - name: LAMBDA_EXECUTOR
          value: "docker-reuse"
        - name: DOCKER_HOST
          value: "unix:///var/run/docker.sock"

        # AWS defaults
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: AWS_ACCESS_KEY_ID
          value: "test"
        - name: AWS_SECRET_ACCESS_KEY
          value: "test"

        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"

        livenessProbe:
          httpGet:
            path: /_localstack/health
            port: 4566
          initialDelaySeconds: 60
          periodSeconds: 10

        readinessProbe:
          httpGet:
            path: /_localstack/health
            port: 4566
          initialDelaySeconds: 30
          periodSeconds: 5

        volumeMounts:
        - name: localstack-data
          mountPath: /tmp/localstack
        - name: docker-socket
          mountPath: /var/run/docker.sock

      volumes:
      - name: localstack-data
        persistentVolumeClaim:
          claimName: localstack-pvc
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket

---
apiVersion: v1
kind: Service
metadata:
  name: localstack
  namespace: clinical-mlops
  labels:
    app: localstack
spec:
  selector:
    app: localstack
  ports:
  - port: 4566
    targetPort: 4566
    name: gateway
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: localstack-pvc
  namespace: clinical-mlops
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# ConfigMap with LocalStack configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: localstack-config
  namespace: clinical-mlops
data:
  endpoint: "http://localstack:4566"
  region: "us-east-1"
  access-key: "test"
  secret-key: "test"

  # Service-specific endpoints
  sqs: "http://localstack:4566"
  sns: "http://localstack:4566"
  dynamodb: "http://localstack:4566"
  lambda: "http://localstack:4566"
  secretsmanager: "http://localstack:4566"
  cloudwatch: "http://localstack:4566"

---
# Init Job to create AWS resources
apiVersion: batch/v1
kind: Job
metadata:
  name: localstack-init
  namespace: clinical-mlops
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: aws-init
        image: amazon/aws-cli:latest
        env:
        - name: AWS_ACCESS_KEY_ID
          value: "test"
        - name: AWS_SECRET_ACCESS_KEY
          value: "test"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: AWS_ENDPOINT_URL
          value: "http://localstack:4566"
        command:
        - /bin/bash
        - -c
        - |
          echo "‚è≥ Waiting for LocalStack..."
          sleep 30

          echo "üìã Creating AWS resources in LocalStack..."

          # SQS Queues
          echo "Creating SQS queues..."
          aws sqs create-queue --queue-name clinical-events-queue --endpoint-url=$AWS_ENDPOINT_URL
          aws sqs create-queue --queue-name model-training-queue --endpoint-url=$AWS_ENDPOINT_URL
          aws sqs create-queue --queue-name feature-processing-queue --endpoint-url=$AWS_ENDPOINT_URL
          aws sqs create-queue --queue-name deadletter-queue --endpoint-url=$AWS_ENDPOINT_URL

          # SNS Topics
          echo "Creating SNS topics..."
          aws sns create-topic --name clinical-events --endpoint-url=$AWS_ENDPOINT_URL
          aws sns create-topic --name model-alerts --endpoint-url=$AWS_ENDPOINT_URL
          aws sns create-topic --name system-alerts --endpoint-url=$AWS_ENDPOINT_URL

          # DynamoDB Tables
          echo "Creating DynamoDB tables..."
          aws dynamodb create-table \
            --table-name model-metadata \
            --attribute-definitions AttributeName=model_id,AttributeType=S \
            --key-schema AttributeName=model_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --endpoint-url=$AWS_ENDPOINT_URL

          aws dynamodb create-table \
            --table-name feature-registry \
            --attribute-definitions AttributeName=feature_id,AttributeType=S \
            --key-schema AttributeName=feature_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --endpoint-url=$AWS_ENDPOINT_URL

          # Secrets Manager
          echo "Creating secrets..."
          aws secretsmanager create-secret \
            --name clinical-mlops/api-keys \
            --secret-string '{"api_key":"test-key-123","service_key":"test-service-456"}' \
            --endpoint-url=$AWS_ENDPOINT_URL

          # CloudWatch Log Groups
          echo "Creating CloudWatch log groups..."
          aws logs create-log-group --log-group-name /aws/lambda/model-training --endpoint-url=$AWS_ENDPOINT_URL
          aws logs create-log-group --log-group-name /aws/lambda/feature-processing --endpoint-url=$AWS_ENDPOINT_URL

          # Kinesis Streams
          echo "Creating Kinesis streams..."
          aws kinesis create-stream \
            --stream-name clinical-events-stream \
            --shard-count 1 \
            --endpoint-url=$AWS_ENDPOINT_URL

          echo "‚úÖ LocalStack resources created successfully!"
          echo ""
          echo "üìä Summary:"
          aws sqs list-queues --endpoint-url=$AWS_ENDPOINT_URL
          aws sns list-topics --endpoint-url=$AWS_ENDPOINT_URL
          aws dynamodb list-tables --endpoint-url=$AWS_ENDPOINT_URL
