name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security
  quality-checks:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety pytest

    - name: Code formatting check
      run: |
        black --check .
        isort --check-only .

    - name: Linting
      run: |
        flake8 --max-line-length=100 --ignore=E203,W503 .

    - name: Type checking
      run: mypy . --ignore-missing-imports

    - name: Security scan with Bandit
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency security scan
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=. --cov-report=xml --junitxml=pytest-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          pytest-results.xml
          coverage.xml
          bandit-report.json
          safety-report.json

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

  # Container Security & Build
  build-and-scan:
    needs: quality-checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [clinical-gateway, model-serving, feature-store, monitoring-service, mlflow]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./applications/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: false
        load: true
        tags: ${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./applications/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ needs.quality-checks.outputs.image-tag }}-${{ matrix.service }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Run integration tests
      run: |
        pytest tests/integration/ --junitxml=integration-results.xml

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: integration-results.xml

  # Deploy to Staging
  deploy-staging:
    needs: [quality-checks, build-and-scan, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging with Helm
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update Helm dependencies
        cd gitops-deployment/helm-charts/clinical-mlops
        helm dependency update
        
        # Deploy to staging environment
        helm upgrade --install clinical-mlops-staging . \
          --namespace clinical-mlops-staging \
          --create-namespace \
          --set global.environment=staging \
          --set global.imageRegistry=${{ env.REGISTRY }} \
          --set global.imageTag=${{ needs.quality-checks.outputs.version }} \
          --wait \
          --timeout 10m

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=available --timeout=300s deployment --all -n clinical-mlops-staging
        
        # Run smoke tests
        ./scripts/smoke-tests.sh staging

    - name: Update ArgoCD application
      run: |
        # Trigger ArgoCD sync if using GitOps
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          https://argocd.example.com/api/v1/applications/clinical-mlops-staging/sync

  # Deploy to Production (Canary)
  deploy-production-canary:
    needs: [quality-checks, build-and-scan, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy canary with Argo Rollouts
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update canary deployment
        kubectl set image rollout/clinical-gateway-bluegreen \
          clinical-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.quality-checks.outputs.version }}-clinical-gateway \
          -n clinical-mlops
        
        # Wait for canary to be ready
        kubectl wait --for=condition=Available --timeout=300s \
          rollout/clinical-gateway-bluegreen -n clinical-mlops

    - name: Monitor canary deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Monitor for 10 minutes
        for i in {1..20}; do
          echo "Checking canary status ($i/20)..."
          
          # Check success rate
          SUCCESS_RATE=$(kubectl exec -n clinical-mlops deploy/prometheus -- \
            promtool query instant \
            'sum(rate(http_server_requests_total{service="clinical-gateway-preview",status!~"5.."}[2m])) / sum(rate(http_server_requests_total{service="clinical-gateway-preview"}[2m]))' \
            | awk '{print $1}')
          
          echo "Success rate: $SUCCESS_RATE"
          
          if (( $(echo "$SUCCESS_RATE >= 0.95" | bc -l) )); then
            echo "✅ Canary is healthy, promoting..."
            kubectl argo rollouts promote clinical-gateway-bluegreen -n clinical-mlops
            break
          fi
          
          if (( $(echo "$SUCCESS_RATE < 0.90" | bc -l) )); then
            echo "❌ Canary is unhealthy, rolling back..."
            kubectl argo rollouts abort clinical-gateway-bluegreen -n clinical-mlops
            exit 1
          fi
          
          sleep 30
        done

    - name: Post-deployment verification
      run: |
        export KUBECONFIG=kubeconfig
        ./scripts/post-deployment-tests.sh production

  # Production Release
  deploy-production:
    needs: deploy-production-canary
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Deploy with Helm to production
      run: |
        export KUBECONFIG=kubeconfig
        
        cd gitops-deployment/helm-charts/clinical-mlops
        helm dependency update
        
        helm upgrade --install clinical-mlops . \
          --namespace clinical-mlops \
          --reuse-values \
          --set global.environment=production \
          --set global.imageTag=${{ github.event.release.tag_name }} \
          --wait \
          --timeout 15m

    - name: Update documentation
      run: |
        # Update deployment documentation
        echo "Deployment completed: ${{ github.event.release.tag_name }}" >> deployment-log.txt
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deployment-log.txt
        git commit -m "Update deployment log for ${{ github.event.release.tag_name }}"
        git push

  # Security Notification
  security-notification:
    needs: [quality-checks, build-and-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: test-results

    - name: Check for security issues
      run: |
        HIGH_VULNS=$(cat trivy-results.sarif | jq '.runs[0].results | map(select(.level == "error")) | length')
        if [ "$HIGH_VULNS" -gt 0 ]; then
          echo "❌ Found $HIGH_VULNS high severity vulnerabilities"
          exit 1
        fi

    - name: Send security notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Security scan failed - review the results before merging"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}