name: Clinical MLOps CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and test applications
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [clinical-data-gateway, lab-results-processor, model-serving, monitoring-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./applications/${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run tests
      run: |
        cd applications/${{ matrix.service }}
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        if [ -f "pytest.ini" ] || [ -f "tests/" ]; then
          python -m pytest tests/ -v
        fi

  # Kubernetes manifest validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Kubernetes tools
      uses: engineerd/setup-kind@v0.6.0
      with:
        version: v0.20.0
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
    - name: Validate Kubernetes manifests
      run: |
        find gitops-deployment/kubernetes-manifests -name "*.yaml" | xargs -I {} kubeval {}
        
    - name: Validate Helm charts
      run: |
        helm lint gitops-deployment/helm-charts/clinical-mlops/
        helm lint gitops-deployment/helm-charts/individual-charts/*/

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, k8s-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Kind cluster
      uses: engineerd/setup-kind@v0.6.0
      with:
        version: v0.20.0
        
    - name: Create Kind cluster
      run: |
        kind create cluster --name clinical-mlops-ci --config gitops-deployment/kind-cluster/kind-config.yaml
        
    - name: Deploy test infrastructure
      run: |
        kubectl apply -f gitops-deployment/kubernetes-manifests/base/infrastructure/00-namespace.yaml
        # Deploy minimal infrastructure for testing
        kubectl apply -f gitops-deployment/kubernetes-manifests/base/infrastructure/ -n infrastructure
        
    - name: Wait for services to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app=minio -n infrastructure --timeout=300s
        kubectl wait --for=condition=ready pod -l app=postgres -n infrastructure --timeout=300s
        
    - name: Run integration tests
      run: |
        cd tests/integration
        python -m pytest test_kafka_spark.py test_mlflow_integration.py -v
        
    - name: Cleanup
      if: always()
      run: kind delete cluster --name clinical-mlops-ci

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, k8s-validation, integration-tests]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#mlops-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()