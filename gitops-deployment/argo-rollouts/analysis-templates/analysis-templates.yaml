---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: clinical-mlops
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 30s
    count: 10
    successCondition: result[0] >= 0.95
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          sum(rate(http_server_requests_total{service="{{args.service-name}}",status!~"5.."}[2m])) /
          sum(rate(http_server_requests_total{service="{{args.service-name}}"}[2m]))

---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: latency-check
  namespace: clinical-mlops
spec:
  args:
  - name: service-name
  - name: latency-threshold
    value: "100ms"
  metrics:
  - name: latency-p95
    interval: 30s
    count: 10
    successCondition: result[0] <= {{args.latency-threshold}}
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          histogram_quantile(0.95,
            sum(rate(http_server_request_duration_seconds_bucket{service="{{args.service-name}}"}[2m])) by (le)
          )

---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: availability-check
  namespace: clinical-mlops
spec:
  args:
  - name: service-name
  metrics:
  - name: availability
    interval: 30s
    count: 10
    successCondition: result[0] == 1
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          up{service="{{args.service-name}}"}

---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: error-rate
  namespace: clinical-mlops
spec:
  args:
  - name: service-name
  - name: error-threshold
    value: "0.05"
  metrics:
  - name: error-rate
    interval: 30s
    count: 10
    successCondition: result[0] <= {{args.error-threshold}}
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus:9090
        query: |
          sum(rate(http_server_requests_total{service="{{args.service-name}}",status=~"5.."}[2m])) /
          sum(rate(http_server_requests_total{service="{{args.service-name}}"}[2m]))